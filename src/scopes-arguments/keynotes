Chapter 13 - Scopes and Arguments

Scope are the visibility of your vars inside a program

Hierarchy of scope:
Module --- world level (files, packages, folders, etc)
  Global --- file level
    Function call (each of them has an own namespace) --- function level
            

Summary: 
    Name references search at most four scopes: local, then enclosing functions (if any), then global, then built-in.
    Name assignments create or change local names by default.
    Global declarations map assigned names to an enclosing module's scope.


========================================================================
  Examples:

x = 3

def method():
  x = 4

print x
==================  result : 3
x = 3

def method(): 
  global x 
  x = 4

print x

==================  result : 4


Special argument matching modes:
 
  In traditional programming languages, we match the arguments we introduce in our function calls with the order of the arguments
  in the function definition, but in Python there are more ways to match the parameters with the arguments, these are:

  1. Positionals: matched left to right (the classic one)
  2. Keywords: matched by argument name
    >>> f(c=3, b=2, a=1)
    1 2 3

     NOTE: Using this kind of matching allows the programmer to document the code (using better vars and stuff). A clear example of this:
     func(name='Bob', age=40, job='dev')


  3. Varargs: catch unmatched positional or keyword arguments
  4. Defaults: specify values for arguments that aren't passed

Examples: 

  func(*name)
  Function
  Matches remaining positional args (in a tuple)

  def func(**name)
  Function
  Matches remaining keyword args (in a dictionary)


IMPORTANT RULES:
    In a call, all keyword arguments must appear after all non-keyword arguments.

    In a function header, the *name must appear after normal arguments and defaults, and **name must appear last.







